import{_ as e,e as i}from"./app.b397120f.js";const n={},r=i(`<h3 id="_4-2preprocessing" tabindex="-1"><a class="header-anchor" href="#_4-2preprocessing" aria-hidden="true">#</a> 4.2 Preprocessing</h3><p><strong>Input:</strong> original image (in colour, greyscale or binarized) <strong>Output:</strong> straightened binarized or greyscale image</p><ul><li>This processing step is meant to produce binarized and normalized greyscale images, a basic requirement for a successful segmentation and recognition.</li><li>Proceed by selecting the relevant scans (sidebar on the right) \u2013 the settings must remain unchanged (\u2018settings (general)\u2019 and \u2018settings (advanced)\u2019), meaning that the images\u2019 angle as well as the automatically generated number of CPUs used by this particular submodule don\u2019t vary either (the latter pertains to all of OCR4all\u2019s subsequent submodules).</li></ul><pre>
BILD

</pre><p>Abb. 9: fig. 9. Pre-processing settings.</p><ul><li>Click on \u2018execute\u2019 to start binarization. The progression of this work stage can be tracked on the console, more accurately the \u2018console output\u2019. Warnings might be issued during the binarization process (in \u2018console error\u2019) which have no incidence on the binarization results.</li><li>In order to check the binarization\u2019s success, simply go to \u2018project overview\u2019 and click on any page identifier then on the display option \u2018binary\u2019. In addition, all processed pages should be marked with a green check mark in the project overview.</li></ul>`,6);function t(s,a){return r}var c=e(n,[["render",t],["__file","4.002-Preprocessing.html.vue"]]);export{c as default};
